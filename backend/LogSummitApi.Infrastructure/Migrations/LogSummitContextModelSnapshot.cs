// <auto-generated />
using System;
using LogSummitApi.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LogSummitApi.Infrastructure.Migrations
{
    [DbContext(typeof(LogSummitContext))]
    partial class LogSummitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CoordinatesString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coordinates");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1555)
                        .HasColumnType("character varying(1555)")
                        .HasColumnName("description");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double>("ElevationGain")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_gain");

                    b.Property<double>("ElevationLoss")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_loss");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("name");

                    b.Property<Guid>("SummitId")
                        .HasColumnType("uuid")
                        .HasColumnName("summit_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SummitId");

                    b.HasIndex("UserId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.RouteAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CoordinatesString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coordinates");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid>("SummitId")
                        .HasColumnType("uuid")
                        .HasColumnName("summit_id");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("RouteAttempt");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.Summit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CoordinateString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coordinate");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Summit");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.Route", b =>
                {
                    b.HasOne("LogSummitApi.Domain.Core.Entities.Summit", "Summit")
                        .WithMany("Routes")
                        .HasForeignKey("SummitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSummitApi.Domain.Core.Entities.User", "User")
                        .WithMany("Routes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Summit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.RouteAttempt", b =>
                {
                    b.HasOne("LogSummitApi.Domain.Core.Entities.Route", "Route")
                        .WithMany("RouteAttempts")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSummitApi.Domain.Core.Entities.User", "User")
                        .WithMany("RouteAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.Summit", b =>
                {
                    b.HasOne("LogSummitApi.Domain.Core.Entities.User", "User")
                        .WithMany("Summits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.Route", b =>
                {
                    b.Navigation("RouteAttempts");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.Summit", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("LogSummitApi.Domain.Core.Entities.User", b =>
                {
                    b.Navigation("RouteAttempts");

                    b.Navigation("Routes");

                    b.Navigation("Summits");
                });
#pragma warning restore 612, 618
        }
    }
}
